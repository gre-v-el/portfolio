{
	"tags": [
		{
			"name": "Rust",
			"color": "#bf4300"
		},
		{
			"name": "macroquad",
			"color": "#bf0000"
		},
		{
			"name": "egui",
			"color": "#363636"
		},
		{
			"name": "wgpu",
			"color": "#7291ab"
		},
		{
			"name": "Java",
			"color": "#2a5791"
		},
		{
			"name": "JavaFx",
			"color": "#2e5587"
		},
		{
			"name": "javascript",
			"color": "#aac70a"
		},
		{
			"name": "typescript",
			"color": "#1a619c"
		},
		{
			"name": "Next.js",
			"color": "#000000"
		},
		{
			"name": "React",
			"color": "#025da8"
		},
		{
			"name": "Three.js",
			"color": "#333333"
		},
		{
			"name": "Godot",
			"color": "#0b4a7d"
		},
		{
			"name": "Flutter",
			"color": "#3d6a8f"
		},
		{
			"name": "Flame",
			"color": "#a34d0b"
		},
		{
			"name": "itch.io",
			"color": "#8c2303"
		},
		{
			"name": "Google Play",
			"route": "GooglePlay",
			"color": "#0d661c"
		}
	],
	"projects": [
		{
			"route": "Portfolio",
			"name": "This website",
			"date": "December 2023",
			"short_description": "",
			"long_description": "",
			"tags": [
				"typescript",
				"React",
				"Next.js"
			],
			"repository": "",
			"live_link": "",
			"release_link": "",
			"thumbnail": "",
			"images": [""]
		},
		{
			"route": "GridLsystems",
			"name": "Grid L-systems",
			"date": "December 2023",
			"short_description": "",
			"long_description": "",
			"tags": [
				"Rust",
				"macroquad",
				"egui"
			],
			"repository": "",
			"live_link": "",
			"release_link": "",
			"thumbnail": "",
			"images": [""]
		},
		{
			"route": "CppFuncLengthCounter",
			"name": "Cpp function length counter",
			"date": "December 2023",
			"short_description": "",
			"long_description": "",
			"tags": [
				"javascript"
			],
			"repository": "",
			"live_link": "",
			"release_link": "",
			"thumbnail": "",
			"images": [""]
		},
		{
			"route": "RunningPaceCalculator",
			"name": "Running Pace Calculator",
			"date": "December 2023",
			"short_description": "",
			"long_description": "",
			"tags": [
				"Flutter",
				"Google Play"
			],
			"repository": "",
			"live_link": "",
			"release_link": "",
			"thumbnail": "",
			"images": [""]
		},
		{
			"route": "ShellTexturing",
			"name": "Shell Texturing",
			"date": "November 2023",
			"short_description": "",
			"long_description": "",
			"tags": [
				"Rust",
				"macroquad",
				"egui"
			],
			"repository": "",
			"live_link": "",
			"release_link": "",
			"thumbnail": "",
			"images": [""]
		},
		{
			"route": "FilesystemExplorer",
			"name": "Filesystem Explorer",
			"date": "October 2023",
			"short_description": "",
			"long_description": "",
			"tags": [
				"Rust",
				"macroquad",
				"egui"
			],
			"repository": "",
			"live_link": "",
			"release_link": "",
			"thumbnail": "",
			"images": [""]
		},
		{
			"route": "GalaxyBlast",
			"name": "GalaxyBlast",
			"date": "July-August 2023",
			"short_description": "",
			"long_description": "",
			"tags": [
				"Flutter",
				"Flame",
				"Google Play"
			],
			"repository": "",
			"live_link": "",
			"release_link": "",
			"thumbnail": "",
			"images": [""]
		},
		{
			"route": "BeeTheZap",
			"name": "Bee the zap",
			"date": "August 2023",
			"short_description": "",
			"long_description": "",
			"tags": [
				"Godot",
				"itch.io"
			],
			"repository": "",
			"live_link": "",
			"release_link": "",
			"thumbnail": "",
			"images": [""]
		},
		{
			"route": "Attractors",
			"name": "Chaotic Attractors",
			"date": "April 2023",
			"short_description": "Simulates and displays arbitrary chaotic attractors",
			"long_description": "The software simulates chaotic attractors, which are mathematical objects that have a tendency to converge to a certain set of points. The user can choose from a set of predefined attractors, or define their own. To define an attractor the user has to provide a system of differential equations. The software then tokenizes the equations and turns them into three abstract syntax trees. The trees are then used to to simulate point paths and to display the attractor. The user can also modify the parameters of the simulation. The software is capable of simulating and displaying ~60 000 points at comfortable framerate.",
			"tags": [
				"Rust",
				"macroquad",
				"egui"
			],
			"repository": "https://github.com/gre-v-el/Chaotic-Attractors",
			"thumbnail": "attractors.png",
			"images": ["attractors1.png", "attractors2.gif", "attractors3.png", "attractors4.png", "attractors5.png", "attractors6.png", "attractors7.gif"]
		},
		{
			"route": "Rubbish",
			"name": "RUBBISH",
			"date": "April 2023",
			"short_description": "<b>R</b>obotic <b>U</b>tility <b>B</b>arely <b>B</b>eneficial <b>I</b>n <b>S</b>erving <b>H</b>umans",
			"long_description": "This is my attempt at LLMs (although it turned out to be a <b>L</b>ittle <b>L</b>anguege <b>M</b>odel. It reads a corpus of text, analyzes the frequencies of sequences of letters and tokenizes the whole corpus. It then generates a succession tree - a tree representing the sequences of tokens in the corpus, together with their frequencies. The program can then use the tree to generate new text, which is similar to the original corpus.",
			"tags": [
				"Rust"
			],
			"repository": "https://github.com/gre-v-el/RUBBISH",
			"thumbnail": "Rubbish.png",
			"images": ["Rubbish.png"]
		},
		{
			"route": "DLA",
			"name": "Infinite DLA",
			"date": "March 2023",
			"short_description": "Unconstrained, modifiable and fast Diffusion Limited Aggregation simulation.",
			"long_description": "The user gets to set the basic parameters of the simulation, concerning the visuals, and also some advanced parameters such as world-to-aggregate ratio and bin sizing.<br><br>The simulation zooms out as the aggregate grows. It does not slow down significantly with the size of the aggregate, thanks to the dynamic binning algorithm.",
			"tags": [
				"Rust",
				"macroquad",
				"egui"
			],
			"repository": "https://github.com/gre-v-el/Infinite-DLA",
			"thumbnail": "DLA.png",
			"images": ["DLA1.png", "DLA2.png", "DLA3.png", "DLA4.png", "DLA5.png", "DLA6.png", "DLA7.png", "DLA8.png"]
		},
		{
			"route": "EyeOfThePi",
			"name": "Eye of the Pi",
			"date": "March 2023",
			"short_description": "Approximations of pi",
			"long_description": "The software can approximate pi in three different ways. The first one (\"Darts\") is a Monte Carlo method, which uses random points to estimate the area of a circle. The second one (\"Toothpicks\") is a Buffon's needle simulation, which uses random needle throws to estimate the value of pi. The third one is an ellastic collision simulation, which uses the number of collisions to estimate pi.",
			"tags": [
				"Rust",
				"macroquad"
			],
			"repository": "https://github.com/gre-v-el/eye-of-the-pi",
			"thumbnail": "pi.png",
			"images": ["pi1.png", "pi2.png", "pi3.png", "pi4.png", "pi5.png"]
		},
		{
			"route": "Graph",
			"name": "Graph display",
			"date": "March 2023",
			"short_description": "Ordered displaying of complex graphs",
			"long_description": "The program simulates a graph as a set of nodes connected with springs. The springs' stiffnesses and lengths are chosen according to the strength of connection between given nodes. Simulating the system results in a graph that is more readable than a random layout. The user can additionally manipulate nodes manually.",
			"tags": [
				"Rust",
				"macroquad"
			],
			"repository": "https://github.com/gre-v-el/Graph-Display",
			"thumbnail": "graph.png",
			"images": ["graph.png", "graph1.png"]
		},
		{
			"route": "Takuzu",
			"name": "Takuzu",
			"date": "February 2023",
			"short_description": "A chill takuzu puzzle with cool animations and lo-fi music",
			"long_description": "Takuzu is played on a square board with NxN cells. Cells can be either true, false, or not yet assigned. The puzzle starts with some cells filled. The player's aim is to fill the rest of the board without breaking any rules. The player can can choose a board size between 2x2 and 20x20. The board generation is multithreaded. The player can choose from three game modes. The appearance of the game is customizable.",
			"tags": [
				"Rust",
				"macroquad",
				"itch.io"
			],
			"repository": "https://github.com/gre-v-el/takuzu",
			"live_link": "https://grem-ble.itch.io/takuzu",
			"thumbnail": "takuzu.png",
			"images": ["takuzu1.png", "takuzu2.png", "takuzu3.png", "takuzu4.png", "takuzu5.png", "takuzu6.png"]
		},
		{
			"route": "Terrain",
			"name": "Fractal Terrain Constructor",
			"date": "January 2023",
			"short_description": "Modular tool for procedural generation of fractal terrains",
			"long_description": "Modular tool for procedural generation of fractal terrains. The user defines a sequence of generation steps (such as subdivide, displace, etc), which are then executed to create a terrain. Meshes can be exported to .obj files to use in other software.",
			"tags": [
				"Rust",
				"egui",
				"wgpu"
			],
			"repository": "https://github.com/gre-v-el/Fractal-Terrain-Constructor",
			"release_link": "https://github.com/gre-v-el/Fractal-Terrain-Constructor/releases/tag/Windows",
			"thumbnail": "terrain.png",
			"images": ["terrain.png", "terrain1.png", "terrain2.png", "terrain3.png"]
		},
		{
			"route": "PPS",
			"name": "Primordial Particle Systems",
			"date": "December 2022",
			"short_description": "PPS simulator with editable rulesets.",
			"long_description": "PPS simulator that lets the user modify the rulesets, place particles with different rules, move them and see them interact.",
			"tags": [
				"Rust",
				"macroquad",
				"egui"
			],
			"repository": "https://github.com/gre-v-el/Promordial-Particle-System",
			"video_link": "https://www.youtube.com/watch?v=FVyj6RD3FXc",
			"thumbnail": "PPS.png",
			"images": ["PPS1.png", "PPS2.png", "PPS3.png", "PPS4.png"]
		},
		{
			"route": "Trutagen",
			"name": "Trutagen",
			"date": "March 2022",
			"short_description": "<b>Tru</b>th <b>ta</b>ble <b>gen</b>erator.",
			"long_description": "An easy to use logic expression parser and evaluator made as one of my first Rust learning projects. The user inputs an expression, the program first tokenizes it, then converts it to reverse polish notation, and finally evaluates it. Example input and output:<br><pre>not a xor b and (c or a)\n\n ┏━━━━━┳━━━━━┳━━━━━┳━━━━━━━━━┓\n ┃  A  ┃  B  ┃  C  ┃ result  ┃\n ┣━━━━━╋━━━━━╋━━━━━╋━━━━━━━━━┫\n ┃  0  ┃  0  ┃  0  ┃    1    ┃\n ┃  0  ┃  0  ┃  1  ┃    1    ┃\n ┃  0  ┃  1  ┃  0  ┃    1    ┃\n ┃  0  ┃  1  ┃  1  ┃    0    ┃\n ┃  1  ┃  0  ┃  0  ┃    0    ┃\n ┃  1  ┃  0  ┃  1  ┃    0    ┃\n ┃  1  ┃  1  ┃  0  ┃    1    ┃\n ┃  1  ┃  1  ┃  1  ┃    1    ┃\n ┗━━━━━┻━━━━━┻━━━━━┻━━━━━━━━━┛\n   NOT A XOR B AND ( C OR A )</pre>",
			"tags": [
				"Rust"
			],
			"repository": "https://github.com/gre-v-el/Trutagen",
			"thumbnail": "trutagen.png",
			"images": ["trutagen.png"]
		},
		{
			"route": "Mandelbrot",
			"name": "Mandelbrot and Julia sets viewer",
			"date": "December 2021",
			"short_description": "Split-view realtime explorer of famous fractals",
			"long_description": "Split-view realtime explorer of famous fractals made in Three.js. Performs fast thanks to glsl shaders. Pickover stalk rendering adds beautiful details to the picture, which can be rendered and saved in resolution higher than your screen. The tool can be used in browser.",
			"tags": [
				"javascript",
				"Three.js"
			],
			"repository": "https://github.com/gre-v-el/Mandelbrot-and-Julia-sets-viewer",
			"live_link": "https://gre-v-el.github.io/Mandelbrot-and-Julia-sets-viewer/",
			"thumbnail": "mandelbrot.png",
			"images": ["mandelbrot1.png", "mandelbrot2.png", "mandelbrot3.png", "mandelbrot4.png", "mandelbrot5.png", "mandelbrot6.png"]
		},
		{
			"route": "GolEditor",
			"name": "Game of Life Editor",
			"date": "December 2021",
			"short_description": "A Game Of Life editor with a stamp library, colors and quadtree optimization.",
			"long_description": "A Game Of Life editor with a stamp library, colors and quadtree optimization. The user can choose and place elements from a rich and extensible stamp library, set their colors, and watch the simulation with color blending. The simulation is optimized with a quadtree, which allows to simulate huge patterns in realtime.",
			"tags": [
				"Java",
				"JavaFx"
			],
			"repository": "https://github.com/gre-v-el/Game-Of-Life-Editor-With-Stamps",
			"thumbnail": "GoL.png",
			"images": ["GoL1.gif", "GoL2.gif", "GoL3.gif", "GoL4.gif", "GoL5.gif", "GoL6.gif", "GoL7.gif", "GoL8.gif"]
		},
		{
			"route": "BarnesHut",
			"name": "Barnes-Hut gravity simulator",
			"date": "July 2021",
			"short_description": "3d big scale gravity simulator",
			"long_description": "A Java/lwjge 3d big scale gravity simulator. The user can place bodies with different masses, generate galaxies or nebulae, and watch them interact with each other. The simulation is based on Barnes-Hut algorithm, which subdivides the space in an octree to speed up the calculations.",
			"tags": [
				"Java"
			],
			"repository": "https://github.com/gre-v-el/Barnes-Hut-simulation",
			"thumbnail": "barnes-hut.png",
			"images": ["barnes-hut1.png", "barnes-hut2.png", "barnes-hut3.png", "barnes-hut4.png"]
		}
	]
}
