{
	"tags": [
		{
			"name": "Rust",
			"color": "#bf4300"
		},
		{
			"name": "macroquad",
			"color": "#bf0000"
		},
		{
			"name": "egui",
			"color": "#363636"
		},
		{
			"name": "wgpu",
			"color": "#7291ab"
		},
		{
			"name": "Java",
			"color": "#2a5791"
		},
		{
			"name": "JavaFx",
			"color": "#2e5587"
		},
		{
			"name": "javascript",
			"color": "#aac70a"
		},
		{
			"name": "typescript",
			"color": "#1a619c"
		},
		{
			"name": "Next.js",
			"color": "#000000"
		},
		{
			"name": "React",
			"color": "#025da8"
		},
		{
			"name": "Three.js",
			"color": "#333333"
		},
		{
			"name": "Godot",
			"color": "#0b4a7d"
		},
		{
			"name": "Flutter",
			"color": "#3d6a8f"
		},
		{
			"name": "Flame",
			"color": "#a34d0b"
		},
		{
			"name": "itch.io",
			"color": "#8c2303"
		},
		{
			"name": "Google Play",
			"route": "GooglePlay",
			"color": "#0d661c"
		}
	],
	"projects": [
		{
			"route": "Terrain",
			"name": "Fractal Terrain Constructor",
			"date": "January 2023",
			"short_description": "Modular tool for procedural generation of fractal terrains",
			"long_description": "Modular tool for procedural generation of fractal terrains. The user defines a sequence of generation steps (such as subdivide, displace, etc), which are then executed to create a terrain. Meshes can be exported to .obj files to use in other software.",
			"tags": [
				"Rust",
				"egui",
				"wgpu"
			],
			"repository": "https://github.com/gre-v-el/Fractal-Terrain-Constructor",
			"release_link": "https://github.com/gre-v-el/Fractal-Terrain-Constructor/releases/tag/Windows",
			"thumbnail": "terrain.png",
			"images": ["terrain.png", "terrain1.png", "terrain2.png", "terrain3.png"]
		},
		{
			"route": "Mandelbrot",
			"name": "Mandelbrot and Julia sets viewer",
			"date": "December 2021",
			"short_description": "Split-view realtime explorer of famous fractals",
			"long_description": "Split-view realtime explorer of famous fractals made in Three.js. Performs fast thanks to glsl shaders. Pickover stalk rendering adds beautiful details to the picture, which can be rendered and saved in resolution higher than your screen. The tool can be used in browser.",
			"tags": [
				"javascript",
				"Three.js"
			],
			"repository": "https://github.com/gre-v-el/Mandelbrot-and-Julia-sets-viewer",
			"live_link": "https://gre-v-el.github.io/Mandelbrot-and-Julia-sets-viewer/",
			"thumbnail": "mandelbrot.png",
			"images": ["mandelbrot1.png", "mandelbrot2.png", "mandelbrot3.png", "mandelbrot4.png", "mandelbrot5.png", "mandelbrot6.png"]
		},
		{
			"route": "GoLEditor",
			"name": "Game of Life Editor",
			"date": "December 2021",
			"short_description": "A Game Of Life editor with a stamp library, colors and quadtree optimization.",
			"long_description": "A Game Of Life editor with a stamp library, colors and quadtree optimization. The user can choose and place elements from a rich and extensible stamp library, set their colors, and watch the simulation with color blending. The simulation is optimized with a quadtree, which allows to simulate huge patterns in realtime.",
			"tags": [
				"Java",
				"JavaFx"
			],
			"repository": "https://github.com/gre-v-el/Game-Of-Life-Editor-With-Stamps",
			"thumbnail": "GoL.png",
			"images": ["GoL1.gif", "GoL2.gif", "GoL3.gif", "GoL4.gif", "GoL5.gif", "GoL6.gif", "GoL7.gif", "GoL8.gif"]
		},
		{
			"route": "BarnesHut",
			"name": "Barnes-Hut gravity simulator",
			"date": "July 2021",
			"short_description": "3d big scale gravity simulator",
			"long_description": "A Java/lwjge 3d big scale gravity simulator. The user can place bodies with different masses, generate galaxies or nebulae, and watch them interact with each other. The simulation is based on Barnes-Hut algorithm, which subdivides the space in an octree to speed up the calculations.",
			"tags": [
				"Java"
			],
			"repository": "https://github.com/gre-v-el/Barnes-Hut-simulation",
			"thumbnail": "barnes-hut.png",
			"images": ["barnes-hut1.png", "barnes-hut2.png", "barnes-hut3.png", "barnes-hut4.png"]
		},
		{
			"route": "Trutagen",
			"name": "Trutagen",
			"date": "March 2022",
			"short_description": "<b>Tru</b>th <b>ta</b>ble <b>gen</b>erator.",
			"long_description": "An easy to use logic expression parser and evaluator made as one of my first Rust learning projects. The user inputs an expression, the program first tokenizes it, then converts it to reverse polish notation, and finally evaluates it. Example input and output:<br><pre>not a xor b and (c or a)\n\n ┏━━━━━┳━━━━━┳━━━━━┳━━━━━━━━━┓\n ┃  A  ┃  B  ┃  C  ┃ result  ┃\n ┣━━━━━╋━━━━━╋━━━━━╋━━━━━━━━━┫\n ┃  0  ┃  0  ┃  0  ┃    1    ┃\n ┃  0  ┃  0  ┃  1  ┃    1    ┃\n ┃  0  ┃  1  ┃  0  ┃    1    ┃\n ┃  0  ┃  1  ┃  1  ┃    0    ┃\n ┃  1  ┃  0  ┃  0  ┃    0    ┃\n ┃  1  ┃  0  ┃  1  ┃    0    ┃\n ┃  1  ┃  1  ┃  0  ┃    1    ┃\n ┃  1  ┃  1  ┃  1  ┃    1    ┃\n ┗━━━━━┻━━━━━┻━━━━━┻━━━━━━━━━┛\n   NOT A XOR B AND ( C OR A )</pre>",
			"tags": [
				"Rust"
			],
			"repository": "https://github.com/gre-v-el/Trutagen",
			"thumbnail": "trutagen.png",
			"images": ["trutagen.png"]
		},
		{
			"route": "DLA",
			"name": "Infinite DLA",
			"date": "March 2023",
			"short_description": "Unconstrained, modifiable and fast Diffusion Limited Aggregation simulation.",
			"long_description": "The user gets to set the basic parameters of the simulation, concerning the visuals, and also some advanced parameters such as world-to-aggregate ratio and bin sizing.<br><br>The simulation zooms out as the aggregate grows. It does not slow down significantly with the size of the aggregate, thanks to the dynamic binning algorithm.",
			"tags": [
				"Rust",
				"macroquad",
				"egui"
			],
			"repository": "https://github.com/gre-v-el/Infinite-DLA",
			"thumbnail": "DLA.png",
			"images": ["DLA1.png", "DLA2.png", "DLA3.png", "DLA4.png", "DLA5.png", "DLA6.png", "DLA7.png", "DLA8.png"]
		},
		{
			"route": "",
			"name": "",
			"date": "",
			"short_description": "",
			"long_description": "",
			"tags": [
			],
			"repository": "",
			"live_link": "",
			"release_link": "",
			"thumbnail": "",
			"images": [""]
		}
	]
}
