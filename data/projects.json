{
	"tags": [
		{
			"name": "Rust",
			"color": "#bf4300"
		},
		{
			"name": "macroquad",
			"color": "#bf0000"
		},
		{
			"name": "egui",
			"color": "#363636"
		},
		{
			"name": "wgpu",
			"color": "#7291ab"
		},
		{
			"name": "Java",
			"color": "#2a5791"
		},
		{
			"name": "JavaFx",
			"color": "#2e5587"
		},
		{
			"name": "javascript",
			"color": "#aac70a"
		},
		{
			"name": "typescript",
			"color": "#1a619c"
		},
		{
			"name": "Next.js",
			"color": "#000000"
		},
		{
			"name": "React",
			"color": "#025da8"
		},
		{
			"name": "Three.js",
			"color": "#333333"
		},
		{
			"name": "Godot",
			"color": "#0b4a7d"
		},
		{
			"name": "Flutter",
			"color": "#3d6a8f"
		},
		{
			"name": "Flame",
			"color": "#a34d0b"
		},
		{
			"name": "itch.io",
			"color": "#8c2303"
		},
		{
			"name": "Google Play",
			"route": "GooglePlay",
			"color": "#0d661c"
		}
	],
	"projects": [
		{
			"route": "AllIsBall",
			"name": "All is Ball",
			"date": "January-February 2024",
			"short_description": "A proof-of-concept mobile suikalike game.",
			"long_description": "A proof-of-concept game based on The Suika Game. My original spin on the idea is making it radial and making the player drop many balls at once. There are 7 levels, each with more balls to unlock. The game ends when the ball clump becomes too big to fit in the screen. The game is available on Google Play.",
			"tags": [
				"Flutter",
				"Flame",
				"Google Play"
			],
			"thumbnail": "allisball.png",
			"live_link": "https://play.google.com/store/apps/details?id=com.gremble.all_is_ball",
			"images": ["allisball1.jpg", "allisball2.jpg", "allisball3.jpg", "allisball4.jpg", "allisball5.jpg", "allisball6.jpg"]
		},
		{
			"route": "Portfolio",
			"name": "This website",
			"date": "December 2023",
			"short_description": "A website showcasing my programming experience",
			"long_description": "This website is a showcase of my programming experience. It is a Next.js app written in TypeScript. The website is hosted on GitHub Pages.",
			"tags": [
				"typescript",
				"React",
				"Next.js"
			],
			"repository": "https://github.com/gre-v-el/portfolio",
			"thumbnail": "portfolio.png",
			"images": []
		},
		{
			"route": "GridLsystems",
			"name": "Grid L-systems Evolution",
			"date": "December 2023",
			"short_description": "Edit, evolve and watch Grid L-Systems grow",
			"long_description": "Grid LSystems are a concept that I came up with. They are very simmilar to a normal LSystem, but instead of existing in a smooth domain, they are defined on a grid. This software lets the user define a GLS and watch it grow, or define a goal for a GLS and let the software evolve it to match the goal with minimal amount of cells.",
			"tags": [
				"Rust",
				"macroquad",
				"egui"
			],
			"repository": "https://github.com/gre-v-el/Grid-L-Systems",
			"thumbnail": "gls.png",
			"images": ["gls1.mp4", "gls2.mp4", "gls3.mp4", "gls4.mp4", "gls5.mp4"]
		},
		{
			"route": "CppFuncLengthCounter",
			"name": "Cpp function length counter",
			"date": "December 2023",
			"short_description": "A tool to check on code encapsulation in C++ projects",
			"long_description": "One of the university projects during the first semester was to create a CLI implementation of backgammon. The most annoying requirement was that the functions could not be longer than <em>555 characters</em>. The lecturer did not provide us with any tool to check the length of the functions, so I decided to create one myself. The tool is a website which accepts many <code>.cpp</code> files and displays a report of function lengths by file and by function. The user can also choose to display the functions' bodies to verify which characters were counted (white characters and comments are omitted). The tool is available on GitHub Pages.",
			"tags": [
				"javascript"
			],
			"repository": "https://github.com/gre-v-el/Cpp-Func-Length-Counter",
			"live_link": "https://gre-v-el.github.io/Cpp-Func-Length-Counter/",
			"thumbnail": "counter.png",
			"images": ["counter1.png", "counter2.gif"]
		},
		{
			"route": "ShellTexturing",
			"name": "Shell Texturing",
			"date": "November 2023",
			"short_description": "Fur rendering with mesh shells",
			"long_description": "This software loads <code>.obj</code> files and renders them with fur. The fur is generated by creating many copies of the mesh, each one slightly extruded along the mesh normals. The meshes are then rendered with a custom shader, which uses the shell index and values of given parameters to calculate the fur's appearance. Fur responds to mesh movement with natural spring-like behaviour. The user can edit the number of shells, fur length, density, shape and many more parameters, including physical ones.",
			"tags": [
				"Rust",
				"macroquad",
				"egui"
			],
			"repository": "https://github.com/gre-v-el/Shell-Texturing",
			"release_link": "https://github.com/gre-v-el/Shell-Texturing/releases/tag/Release",
			"thumbnail": "shell.png",
			"images": ["shell1.gif", "shell2.gif", "shell3.gif", "shell4.gif", "shell5.png"]
		},
		{
			"route": "FilesystemExplorer",
			"name": "Filesystem Explorer",
			"date": "October 2023",
			"short_description": "Visual filesystem explorer",
			"long_description": "This project was created as a tool helpful when cleaning up my hard drive. It is a visual filesystem explorer, which displays the contents of a given directory as tiles with sizes proportional to the size of the files they represent. The user can go deeper into the filesystem to diagnose which directories take up the most space. A custom layout algorithm was implemented to make the tiles as readable as possible.",
			"tags": [
				"Rust",
				"macroquad",
				"egui"
			],
			"repository": "https://github.com/gre-v-el/FsExpl",
			"release_link": "https://github.com/gre-v-el/FsExpl/releases/",
			"thumbnail": "fsexpl.png",
			"images": ["fsexpl1.png", "fsexpl2.png", "fsexpl3.png"]
		},
		{
			"route": "GalaxyBlast",
			"name": "GalaxyBlast",
			"date": "July-August 2023",
			"short_description": "A mobile game about a spaceship shooting asteroids",
			"long_description": "Inspired by the classic arcade game Asteroids, GalaxyBlast is a mobile game about a spaceship shooting asteroids of different types. The player beats waves of asteroids to earn shards, unlock achievements, buy and upgrade ships, and unlock new locations. The game is available on Google Play.",
			"tags": [
				"Flutter",
				"Flame",
				"Google Play"
			],
			"live_link": "https://play.google.com/store/apps/details?id=com.galaxy.blast&hl=en&gl=US",
			"thumbnail": "galaxyblast.png",
			"images": ["galaxyblast1.jpg", "galaxyblast2.jpg", "galaxyblast3.jpg", "galaxyblast4.jpg", "galaxyblast5.jpg", "galaxyblast6.jpg", "galaxyblast7.jpg", "galaxyblast8.jpg"]
		},
		{
			"route": "BeeTheZap",
			"name": "Bee the zap",
			"date": "August 2023",
			"short_description": "A little game about a bee flying into zappers",
			"long_description": "This was my first learning project in Godot. The game is about a bee flying into zappers. The game can be played in browser on itch.io.",
			"tags": [
				"Godot",
				"itch.io"
			],
			"live_link": "https://grem-ble.itch.io/bee-the-zap",
			"thumbnail": "bee.png",
			"images": ["bee1.png", "bee2.png"]
		},
		{
			"route": "Attractors",
			"name": "Chaotic Attractors",
			"date": "April 2023",
			"short_description": "Simulates and displays arbitrary chaotic attractors",
			"long_description": "The software simulates chaotic attractors, which are mathematical objects that have a tendency to converge to a certain set of points. The user can choose from a set of predefined attractors, or define their own. To define an attractor the user has to provide a system of differential equations. The software then tokenizes the equations and turns them into three abstract syntax trees. The trees are then used to to simulate point paths and to display the attractor. The user can also modify the parameters of the simulation. The software is capable of simulating and displaying ~60 000 points at comfortable framerate.",
			"tags": [
				"Rust",
				"macroquad",
				"egui"
			],
			"repository": "https://github.com/gre-v-el/Chaotic-Attractors",
			"thumbnail": "attractors.png",
			"images": ["attractors8.mp4", "attractors9.mp4", "attractors1.png", "attractors2.gif", "attractors3.png", "attractors4.png", "attractors5.png", "attractors6.png", "attractors7.gif"]
		},
		{
			"route": "Rubbish",
			"name": "RUBBISH",
			"date": "April 2023",
			"short_description": "<b>R</b>obotic <b>U</b>tility <b>B</b>arely <b>B</b>eneficial <b>I</b>n <b>S</b>erving <b>H</b>umans",
			"long_description": "This is my take at LLMs (although it turned out to be a <b>L</b>ittle <b>L</b>anguege <b>M</b>odel). It reads a corpus of text, analyzes the frequencies of sequences of letters and tokenizes the whole corpus. It then generates a succession tree - a tree representing the sequences of tokens in the corpus, together with their frequencies. The program can then use the tree to generate new text, which is similar to the original corpus.",
			"tags": [
				"Rust"
			],
			"repository": "https://github.com/gre-v-el/RUBBISH",
			"thumbnail": "Rubbish.png",
			"images": ["Rubbish.png"]
		},
		{
			"route": "DLA",
			"name": "Infinite DLA",
			"date": "March 2023",
			"short_description": "Unconstrained, modifiable and fast Diffusion Limited Aggregation simulation.",
			"long_description": "The software simulates Diffusion Limimted Aggregation by simulating particles moving in a circular container around the aggregate and sticking to it. The user gets to set the basic parameters of the simulation, concerning the visuals, and also some advanced parameters such as world-to-aggregate ratio and bin sizing.<br><br>The simulation zooms out as the aggregate grows. The performance does not degrade significantly with the size of the aggregate, thanks to the dynamic binning algorithm.",
			"tags": [
				"Rust",
				"macroquad",
				"egui"
			],
			"repository": "https://github.com/gre-v-el/Infinite-DLA",
			"thumbnail": "DLA.png",
			"images": ["DLA1.png", "DLA2.png", "DLA3.png", "DLA4.png", "DLA5.png", "DLA6.png", "DLA7.png", "DLA8.png"]
		},
		{
			"route": "EyeOfThePi",
			"name": "Eye of the Pi",
			"date": "March 2023",
			"short_description": "Approximations of pi",
			"long_description": "The software can approximate pi in three different ways. The first one (\"Darts\") is a Monte Carlo method, which uses random points to estimate the area of a circle. The second one (\"Toothpicks\") is a Buffon's needle simulation, which uses random needle throws to estimate the value of pi. The third one is an ellastic collision simulation, which uses the number of collisions to estimate pi.",
			"tags": [
				"Rust",
				"macroquad"
			],
			"repository": "https://github.com/gre-v-el/eye-of-the-pi",
			"thumbnail": "pi.png",
			"images": ["pi1.png", "pi2.png", "pi3.png", "pi4.png", "pi5.png"]
		},
		{
			"route": "Graph",
			"name": "Graph display",
			"date": "March 2023",
			"short_description": "Ordered displaying of complex graphs",
			"long_description": "The program simulates a graph as a set of nodes connected with springs. The springs' stiffnesses and lengths are chosen according to the strength of connection between given nodes. Simulating the system results in a graph that is more readable than a random layout. The user can additionally manipulate nodes manually.",
			"tags": [
				"Rust",
				"macroquad"
			],
			"repository": "https://github.com/gre-v-el/Graph-Display",
			"thumbnail": "graph.png",
			"images": ["graph2.mp4", "graph.png", "graph1.png"]
		},
		{
			"route": "Takuzu",
			"name": "Takuzu",
			"date": "February 2023",
			"short_description": "A chill takuzu puzzle with cool animations and lo-fi music",
			"long_description": "Takuzu is played on a square board with NxN cells. Cells can be either true, false, or not yet assigned. The puzzle starts with some cells filled. The player's aim is to fill the rest of the board without breaking any rules. The player can choose a board size between 2x2 and 20x20. The board generation is multithreaded. The player can choose from three game modes. The appearance of the game is customizable.",
			"tags": [
				"Rust",
				"macroquad",
				"itch.io"
			],
			"repository": "https://github.com/gre-v-el/takuzu",
			"live_link": "https://grem-ble.itch.io/takuzu",
			"thumbnail": "takuzu.png",
			"images": ["takuzu1.png", "takuzu2.png", "takuzu3.png", "takuzu4.png", "takuzu5.png", "takuzu6.png"]
		},
		{
			"route": "Terrain",
			"name": "Fractal Terrain Constructor",
			"date": "January 2023",
			"short_description": "Modular tool for procedural generation of fractal terrains",
			"long_description": "Modular tool for procedural generation of fractal terrains. The user defines a sequence of generation steps (such as subdivide, displace, etc), which are then executed to create a terrain. Meshes can be exported to .obj files to use in other software.",
			"tags": [
				"Rust",
				"egui",
				"wgpu"
			],
			"repository": "https://github.com/gre-v-el/Fractal-Terrain-Constructor",
			"release_link": "https://github.com/gre-v-el/Fractal-Terrain-Constructor/releases/tag/Windows",
			"thumbnail": "terrain.png",
			"images": ["terrain.png", "terrain1.png", "terrain2.png", "terrain3.png"]
		},
		{
			"route": "PPS",
			"name": "Primordial Particle Systems",
			"date": "December 2022",
			"short_description": "PPS simulator with editable rulesets.",
			"long_description": "PPS simulator that lets the user modify the rulesets, place particles with different rules, move them and see them interact.",
			"tags": [
				"Rust",
				"macroquad",
				"egui"
			],
			"repository": "https://github.com/gre-v-el/Promordial-Particle-System",
			"video_link": "https://www.youtube.com/watch?v=FVyj6RD3FXc",
			"thumbnail": "PPS.png",
			"images": ["PPS1.png", "PPS2.png", "PPS3.png", "PPS4.png"]
		},
		{
			"route": "Trutagen",
			"name": "Trutagen",
			"date": "March 2022",
			"short_description": "<b>Tru</b>th <b>ta</b>ble <b>gen</b>erator.",
			"long_description": "An easy to use logic expression parser and evaluator made as one of my first Rust learning projects. The user inputs an expression, the program first tokenizes it, then converts it to reverse polish notation, and finally evaluates it for all possible values of variables.",
			"tags": [
				"Rust"
			],
			"repository": "https://github.com/gre-v-el/Trutagen",
			"thumbnail": "trutagen.png",
			"images": ["trutagen.png"]
		},
		{
			"route": "Mandelbrot",
			"name": "Mandelbrot and Julia sets viewer",
			"date": "December 2021",
			"short_description": "Split-view realtime explorer of famous fractals",
			"long_description": "Split-view realtime explorer of famous fractals made in Three.js. Performs fast thanks to glsl shaders. Pickover stalk rendering adds beautiful details to the picture, which can be rendered and saved in resolution higher than your screen. The tool can be used in browser.",
			"tags": [
				"javascript",
				"Three.js"
			],
			"repository": "https://github.com/gre-v-el/Mandelbrot-and-Julia-sets-viewer",
			"live_link": "https://gre-v-el.github.io/Mandelbrot-and-Julia-sets-viewer/",
			"thumbnail": "mandelbrot.png",
			"images": ["mandelbrot1.png", "mandelbrot2.png", "mandelbrot3.png", "mandelbrot4.png", "mandelbrot5.png", "mandelbrot6.png"]
		},
		{
			"route": "GolEditor",
			"name": "Game of Life Editor",
			"date": "December 2021",
			"short_description": "A Game Of Life editor with a stamp library, colors and quadtree optimization.",
			"long_description": "A Game Of Life editor with a stamp library, colors and quadtree optimization. The user can choose and place elements from a rich and extensible stamp library, set their colors, and watch the simulation with color blending. The simulation is optimized with a quadtree, which allows to simulate huge patterns in realtime.",
			"tags": [
				"Java",
				"JavaFx"
			],
			"repository": "https://github.com/gre-v-el/Game-Of-Life-Editor-With-Stamps",
			"thumbnail": "GoL.png",
			"images": ["GoL1.gif", "GoL2.gif", "GoL3.gif", "GoL4.gif", "GoL5.gif", "GoL6.gif", "GoL7.gif"]
		},
		{
			"route": "BarnesHut",
			"name": "Barnes-Hut gravity simulator",
			"date": "July 2021",
			"short_description": "3d big scale gravity simulator",
			"long_description": "A Java/lwjge 3d big scale gravity simulator. The user can place bodies with different masses, generate galaxies or nebulae, and watch them interact with each other. The simulation is based on Barnes-Hut algorithm, which subdivides the space in an octree to speed up the calculations.",
			"tags": [
				"Java"
			],
			"repository": "https://github.com/gre-v-el/Barnes-Hut-simulation",
			"thumbnail": "barnes-hut.png",
			"images": ["barnes-hut1.png", "barnes-hut2.png", "barnes-hut3.png", "barnes-hut4.png"]
		}
	],
	"featured": [
		"Attractors", "Rubbish", "Mandelbrot", "BarnesHut"
	]
}
